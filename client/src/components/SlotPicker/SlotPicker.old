// import mockData from '../../mock/mock';
// import Input from '@material-ui/core/Input';
// import InputLabel from '@material-ui/core/InputLabel';
// import MenuItem from '@material-ui/core/MenuItem';
// import FormControl from '@material-ui/core/FormControl';
// import Select from '@material-ui/core/Select';
// import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';
// import ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';
// import { useHistory } from 'react-router-dom';



// INSIDE SlotPicker(props) {
    // const [state, setState] = useState([]);
    // const [positionFilter, setPositionFilter] = useState('');
    // const [dayOfWeek, setDayOfWeek] = useState('');
    // const history = useHistory();

    //Create the arrays for
    // const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'All'];
    // //Array for display of months and calculation of data
    // const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];


    //Gets the data of today to set the starting area
    // let today = new Date();
    // const [currentMonth, setMonth] = useState(today.getMonth()); // months are zero-indexed; so this function would return 10 for November instead of 11
    // const [currentYear, setYear] = useState(today.getFullYear());

            //setEvents(result);

        // let dayOfWeek = 3;
        // let emptySlots = new Array(dayOfWeek);
        //     async function fetchData(month, year) {
    //         let res = await getData(month, year);
    //         let dayOfWeek = new Date(res.data[0].date).getDay();
    //         let emptySlots = new Array(dayOfWeek);
    //         setState({
    //             ...state,
    //             lessonData: [...emptySlots, ...res.data],
    //             originalData: [...emptySlots, ...res.data]
    //         });
    //     }
    //     fetchData(currentMonth + 1, currentYear);
        
    // }, [currentMonth, currentYear]);

    // fetch(URL).then(res => resolve(res));
        //let result = "";

        //console.log('hi', mockData);
        //return mockData;

        //Apply the position search by using filter
    // const searchByPosition = (e) => {
    //     setPositionFilter(e.target.value);
    //     console.log('Searching by position', e.target.value);
    //     filter(e.target.value, dayOfWeek);
    // }

    // //Apply the day search using filter
    // const searchByDay = (e) => {
    //     setDayOfWeek(e.target.value);
    //     console.log('Searching by day', e.target.value, dayOfWeek);
    //     filter(positionFilter, e.target.value);
    // }


    //Uses position and day to narrow down searches. day 7 == all
    // const filter = (position, day) => {
    //     position = position.toString().toLowerCase();
    //     let invalidDay = isNaN(parseInt(day)) || day < 0 || day > 7;
    //     let invalidPosition = position.length === 0;
    //     let temp;
    //     if(invalidDay && invalidPosition) {
    //         temp = state.originalData;
    //     } else {
    //         temp = state.originalData.map(item => {
    //             let isTruthy = true;
    //             let positions = item && item.positions ? Object.keys(item.positions): null;
    //             if (position.length && positions && positions.length) {
    //                 isTruthy = positions.some((pos) => {
    //                     let p = pos.toString().toLowerCase();
    //                     return p.includes(position);
    //                 });
    //                 if(!isTruthy) {
    //                     return null;
    //                 }
    //                 if(isNaN(parseInt(day)) || day < 0 || day > 7) {
    //                     return item;
    //                 }
    //             }
    //             if(day == 7)
    //             {
    //                 isTruthy = (item && item.date);
    //             }
    //             else
    //             {
    //                 isTruthy = (item && item.date && (new Date(item.date).getDay() === day));
    //             }
    //             return isTruthy ? item : null;
    //         });
    //     }

    //     setState({
    //         ...state,
    //         lessonData: temp
    //     });
    // }
     // const changeMonth = (type) => {
    //     let month;
    //     switch(type) {
    //         case 'forward':
    //             month = (currentMonth + 1) % 12;
    //             if (month === 0) {
    //                 setYear(currentYear + 1);
    //             }
    //             setMonth(month);
    //             break;
    //         case 'backward':
    //             month = currentMonth - 1;
    //             month = month < 0 ? 11 : month;
    //             if (month === 11) {
    //                 setYear(currentYear - 1);
    //             }
    //             setMonth(month);
    //             break;
    //         default:

    //     }
    // };

// const viewSlotDetails = (data) => {
    //     console.log('Viewing slot details', data);
        
    //     let temp = <CustomAccordion data={data} handleClose={handleClose} signUp={signUp} />

    //     setBody(temp);

    //     openModal();
    // }
// }

/* <div className="month-picker">
                    <ArrowBackIosIcon className="clickable" onClick={() => changeMonth('backward')}/><span className="month-text">{months[currentMonth]}  {currentYear}</span><ArrowForwardIosIcon className="clickable" onClick={() => changeMonth('forward')}/>
                </div>
                <Input type="text" style={{width: '20%'}} value={positionFilter} onChange={searchByPosition} placeholder="Search by position"/>
                <FormControl className={classes.formControl}>
                    <InputLabel id="dayFilter">Select Day</InputLabel>
                    <Select labelId="dayFilter" id="demo-simple-select" value={dayOfWeek} onChange={searchByDay} >
                        { days.map((day, ind) => <MenuItem key={ind} value={ind}>{day}</MenuItem>) }
                    </Select>
                </FormControl> */